# -*- coding: utf-8 -*-

import asyncio
import os
import uuid
from pathlib import Path

from environs import Env
from pyrogram import Client, filters
from pyrogram.raw.functions.account import ReportPeer
from pyrogram.raw.types import InputPeerChannel, InputReportReasonSpam

from __version__ import __version__

env = Env()
env.read_env()  # read .env file, if it exists

api_id = env.int('API_ID')
api_hash = env.str('API_HASH')
session_path = Path('session')

print(f"–í–ï–†–°–Ü–Ø: {__version__}")


def on_start():
    if session_path.exists():
        with open(session_path) as file:
            session_string = file.read()

            if not session_string:
                os.remove(session_path)
                print("–°—Ç–∞—Ä–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–∞")
                print("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É —â–æ–± –ø–æ—á–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è")
                exit()

            return Client(session_string, api_id, api_hash)

    else:
        with Client(uuid.uuid4().hex, api_id, api_hash) as tmp_app:
            with open(session_path, 'w') as file:
                session_string = tmp_app.export_session_string()
                file.write(session_string)

        print("–ü—Ä–æ–≥—Ä–∞–º–∞ —Å–∫–æ–Ω—Ñ—ñ–≥—É—Ä–æ–≤–∞–Ω–∞")
        print("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É —â–æ–± –ø–æ—á–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è")
        exit()


app = on_start()


@app.on_message(filters.command(commands='report') & filters.private)
async def cmd_report(client, message):
    print("–ï–∫—Å–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ –∑ –∫–∞–Ω–∞–ª–∞–º–∏...")
    await client.send_message("me", "–ï–∫—Å–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ –∑ –∫–∞–Ω–∞–ª–∞–º–∏...")

    print("üíÅ‚Äç‚ôÇÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ 30-40 —Å–∫–∞—Ä–≥ –≤ –≥–æ–¥–∏–Ω—É")
    await client.send_message("me", "üíÅ‚Äç‚ôÇÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ 30-40 —Å–∫–∞—Ä–≥ –≤ –≥–æ–¥–∏–Ω—É")

    with open(Path('ban_channels.txt')) as file:
        ids = list(map(str.strip, file.readlines()))

    length = len(ids)

    for _, i in enumerate(ids, start=1):
        try:
            peer: InputPeerChannel = await client.resolve_peer(i)
            response = await client.send(data=ReportPeer(peer=peer, reason=InputReportReasonSpam(), message="–¢–µ—Ä–æ—Ä–∏–∑–º"))
            print(f"[{_}/{length}] –ö–∞–Ω–∞–ª {i} –æ—Ç—Ä–∏–º–∞–≤ —Å–∫–∞—Ä–≥—É, {response}")
            await client.send_message("me", f"[{_}/{length}] –ö–∞–Ω–∞–ª {i} –æ—Ç—Ä–∏–º–∞–≤ —Å–∫–∞—Ä–≥—É, {response}")

        except Exception as exc:
            print(exc)

        finally:
            await asyncio.sleep(5)  # –°–ø–∏–º–æ —â–æ–± –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç–∏


app.connect()
app.send_message("me", "–í–≤–µ–¥—ñ—Ç—å —Ç—É—Ç –∫–æ–º–∞–Ω–¥—É /report")
print("–í–≤–µ–¥—ñ—Ç—å –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É —á–∞—Ç—ñ –∫–æ–º–∞–Ω–¥—É /report\n"
      "–í–∞–º –Ω–∞–¥—ñ–π—à–ª–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ü–µ–π —á–∞—Ç. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–ø–∏—Å–æ–∫ —á–∞—Ç—ñ–≤.")
app.disconnect()
app.run()
